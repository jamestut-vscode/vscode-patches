From 7e409fcdb4aa7a59994fbbd4dad908c81188b589 Mon Sep 17 00:00:00 2001
From: James <aslan.jnn@gmail.com>
Date: Fri, 5 Apr 2024 10:57:29 +1100
Subject: Unify about message between native and custom dialog

---
 .../parts/dialogs/dialog.web.contribution.ts  |  6 +++--
 .../browser/parts/dialogs/dialogHandler.ts    | 20 ++++++----------
 src/vs/workbench/constants.ts                 | 21 +++++++++++++++++
 .../parts/dialogs/dialog.contribution.ts      |  2 +-
 .../parts/dialogs/dialogHandler.ts            | 23 +++----------------
 5 files changed, 36 insertions(+), 36 deletions(-)
 create mode 100644 src/vs/workbench/constants.ts

diff --git a/src/vs/workbench/browser/parts/dialogs/dialog.web.contribution.ts b/src/vs/workbench/browser/parts/dialogs/dialog.web.contribution.ts
index a97e57d2cbe..bceeaaaeac6 100644
--- a/src/vs/workbench/browser/parts/dialogs/dialog.web.contribution.ts
+++ b/src/vs/workbench/browser/parts/dialogs/dialog.web.contribution.ts
@@ -16,6 +16,7 @@ import { DialogService } from 'vs/workbench/services/dialogs/common/dialogServic
 import { Disposable } from 'vs/base/common/lifecycle';
 import { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';
 import { Lazy } from 'vs/base/common/lazy';
+import { INativeHostService } from 'vs/platform/native/common/native';
 
 export class DialogHandlerContribution extends Disposable implements IWorkbenchContribution {
 
@@ -33,11 +34,12 @@ export class DialogHandlerContribution extends Disposable implements IWorkbenchC
 		@IKeybindingService keybindingService: IKeybindingService,
 		@IInstantiationService instantiationService: IInstantiationService,
 		@IProductService productService: IProductService,
-		@IClipboardService clipboardService: IClipboardService
+		@IClipboardService clipboardService: IClipboardService,
+		@INativeHostService nativeHostService: INativeHostService
 	) {
 		super();
 
-		this.impl = new Lazy(() => new BrowserDialogHandler(logService, layoutService, keybindingService, instantiationService, productService, clipboardService));
+		this.impl = new Lazy(() => new BrowserDialogHandler(logService, nativeHostService, layoutService, keybindingService, instantiationService, productService, clipboardService));
 
 		this.model = (this.dialogService as DialogService).model;
 
diff --git a/src/vs/workbench/browser/parts/dialogs/dialogHandler.ts b/src/vs/workbench/browser/parts/dialogs/dialogHandler.ts
index c064ebced0c..6c0060dbd60 100644
--- a/src/vs/workbench/browser/parts/dialogs/dialogHandler.ts
+++ b/src/vs/workbench/browser/parts/dialogs/dialogHandler.ts
@@ -4,6 +4,7 @@
  *--------------------------------------------------------------------------------------------*/
 
 import { localize } from 'vs/nls';
+import { aboutString } from 'vs/workbench/constants';
 import { IConfirmation, IConfirmationResult, IInputResult, ICheckbox, IInputElement, ICustomDialogOptions, IInput, AbstractDialogHandler, DialogType, IPrompt, IAsyncPromptResult } from 'vs/platform/dialogs/common/dialogs';
 import { ILayoutService } from 'vs/platform/layout/browser/layoutService';
 import { ILogService } from 'vs/platform/log/common/log';
@@ -15,11 +16,11 @@ import { EventHelper } from 'vs/base/browser/dom';
 import { IKeybindingService } from 'vs/platform/keybinding/common/keybinding';
 import { IProductService } from 'vs/platform/product/common/productService';
 import { IClipboardService } from 'vs/platform/clipboard/common/clipboardService';
-import { fromNow } from 'vs/base/common/date';
 import { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';
 import { MarkdownRenderer } from 'vs/editor/browser/widget/markdownRenderer/browser/markdownRenderer';
 import { defaultButtonStyles, defaultCheckboxStyles, defaultDialogStyles, defaultInputBoxStyles } from 'vs/platform/theme/browser/defaultStyles';
 import { ResultKind } from 'vs/platform/keybinding/common/keybindingResolver';
+import { INativeHostService } from 'vs/platform/native/common/native';
 
 export class BrowserDialogHandler extends AbstractDialogHandler {
 
@@ -36,6 +37,7 @@ export class BrowserDialogHandler extends AbstractDialogHandler {
 
 	constructor(
 		@ILogService private readonly logService: ILogService,
+		@INativeHostService private readonly nativeHostService: INativeHostService,
 		@ILayoutService private readonly layoutService: ILayoutService,
 		@IKeybindingService private readonly keybindingService: IKeybindingService,
 		@IInstantiationService private readonly instantiationService: IInstantiationService,
@@ -76,18 +78,10 @@ export class BrowserDialogHandler extends AbstractDialogHandler {
 	}
 
 	async about(): Promise<void> {
-		const detailString = (useAgo: boolean): string => {
-			return localize('aboutDetail',
-				"Version: {0}\nCommit: {1}\nDate: {2}\nBrowser: {3}",
-				this.productService.version || 'Unknown',
-				this.productService.commit || 'Unknown',
-				this.productService.date ? `${this.productService.date}${useAgo ? ' (' + fromNow(new Date(this.productService.date), true) + ')' : ''}` : 'Unknown',
-				navigator.userAgent
-			);
-		};
-
-		const detail = detailString(true);
-		const detailToCopy = detailString(false);
+		const osProps = await this.nativeHostService.getOSProperties();
+
+		const detail = aboutString(osProps, this.productService, true);
+		const detailToCopy = aboutString(osProps, this.productService, false);
 
 		const { button } = await this.doShow(
 			Severity.Info,
diff --git a/src/vs/workbench/constants.ts b/src/vs/workbench/constants.ts
new file mode 100644
index 00000000000..44b543aeca0
--- /dev/null
+++ b/src/vs/workbench/constants.ts
@@ -0,0 +1,21 @@
+import { localize } from 'vs/nls';
+import { fromNow } from 'vs/base/common/date';
+import { isLinuxSnap } from 'vs/base/common/platform';
+import { IProductService } from 'vs/platform/product/common/productService';
+import { IOSProperties } from 'vs/platform/native/common/native';
+import { process } from 'vs/base/parts/sandbox/electron-sandbox/globals';
+
+export const aboutString = (osProps: IOSProperties, productService: IProductService, useAgo: boolean): string => {
+	return localize({ key: 'aboutDetail', comment: ['Electron, Chromium, Node.js and V8 are product names that need no translation'] },
+		"Version: {0}\nCommit: {1}\nDate: {2}\nElectron: {3}\nElectronBuildId: {4}\nChromium: {5}\nNode.js: {6}\nV8: {7}\nOS: {8}",
+		productService.version,
+		productService.commit || '(development)',
+		productService.date ? `${productService.date}${useAgo ? ' (' + fromNow(new Date(productService.date), true) + ')' : ''}` : 'Unknown',
+		process.versions['electron'],
+		process.versions['microsoft-build'],
+		process.versions['chrome'],
+		process.versions['node'],
+		process.versions['v8'],
+		`${osProps.type} ${osProps.arch} ${osProps.release}${isLinuxSnap ? ' snap' : ''}`
+	);
+};
diff --git a/src/vs/workbench/electron-sandbox/parts/dialogs/dialog.contribution.ts b/src/vs/workbench/electron-sandbox/parts/dialogs/dialog.contribution.ts
index d9493a6453d..33dbdfeade5 100644
--- a/src/vs/workbench/electron-sandbox/parts/dialogs/dialog.contribution.ts
+++ b/src/vs/workbench/electron-sandbox/parts/dialogs/dialog.contribution.ts
@@ -43,7 +43,7 @@ export class DialogHandlerContribution extends Disposable implements IWorkbenchC
 	) {
 		super();
 
-		this.browserImpl = new Lazy(() => new BrowserDialogHandler(logService, layoutService, keybindingService, instantiationService, productService, clipboardService));
+		this.browserImpl = new Lazy(() => new BrowserDialogHandler(logService, nativeHostService, layoutService, keybindingService, instantiationService, productService, clipboardService));
 		this.nativeImpl = new Lazy(() => new NativeDialogHandler(logService, nativeHostService, productService, clipboardService));
 
 		this.model = (this.dialogService as DialogService).model;
diff --git a/src/vs/workbench/electron-sandbox/parts/dialogs/dialogHandler.ts b/src/vs/workbench/electron-sandbox/parts/dialogs/dialogHandler.ts
index f2cc82ab8c5..a3d2da88c68 100644
--- a/src/vs/workbench/electron-sandbox/parts/dialogs/dialogHandler.ts
+++ b/src/vs/workbench/electron-sandbox/parts/dialogs/dialogHandler.ts
@@ -4,14 +4,12 @@
  *--------------------------------------------------------------------------------------------*/
 
 import { localize } from 'vs/nls';
-import { fromNow } from 'vs/base/common/date';
-import { isLinuxSnap } from 'vs/base/common/platform';
+import { aboutString } from 'vs/workbench/constants';
 import { IClipboardService } from 'vs/platform/clipboard/common/clipboardService';
 import { AbstractDialogHandler, IConfirmation, IConfirmationResult, IPrompt, IAsyncPromptResult } from 'vs/platform/dialogs/common/dialogs';
 import { ILogService } from 'vs/platform/log/common/log';
 import { INativeHostService } from 'vs/platform/native/common/native';
 import { IProductService } from 'vs/platform/product/common/productService';
-import { process } from 'vs/base/parts/sandbox/electron-sandbox/globals';
 import { getActiveWindow } from 'vs/base/browser/dom';
 
 export class NativeDialogHandler extends AbstractDialogHandler {
@@ -79,23 +77,8 @@ export class NativeDialogHandler extends AbstractDialogHandler {
 
 		const osProps = await this.nativeHostService.getOSProperties();
 
-		const detailString = (useAgo: boolean): string => {
-			return localize({ key: 'aboutDetail', comment: ['Electron, Chromium, Node.js and V8 are product names that need no translation'] },
-				"Version: {0}\nCommit: {1}\nDate: {2}\nElectron: {3}\nElectronBuildId: {4}\nChromium: {5}\nNode.js: {6}\nV8: {7}\nOS: {8}",
-				version,
-				this.productService.commit || 'Unknown',
-				this.productService.date ? `${this.productService.date}${useAgo ? ' (' + fromNow(new Date(this.productService.date), true) + ')' : ''}` : 'Unknown',
-				process.versions['electron'],
-				process.versions['microsoft-build'],
-				process.versions['chrome'],
-				process.versions['node'],
-				process.versions['v8'],
-				`${osProps.type} ${osProps.arch} ${osProps.release}${isLinuxSnap ? ' snap' : ''}`
-			);
-		};
-
-		const detail = detailString(true);
-		const detailToCopy = detailString(false);
+		const detail = aboutString(osProps, this.productService, true);
+		const detailToCopy = aboutString(osProps, this.productService, false);
 
 		const { response } = await this.nativeHostService.showMessageBox({
 			type: 'info',
-- 
2.39.3 (Apple Git-145)
