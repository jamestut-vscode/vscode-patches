From e997aedcb2a82eacc80107259a5728f5d400cd2b Mon Sep 17 00:00:00 2001
From: James <aslan.jnn@gmail.com>
Date: Sun, 7 Apr 2024 13:42:23 +1000
Subject: Proper use of globalFindClipboard on search view

---
 .../search/browser/searchActionsFind.ts       |  4 +-
 .../search/browser/searchActionsNav.ts        |  4 +-
 .../contrib/search/browser/searchView.ts      | 47 +++++--------------
 3 files changed, 17 insertions(+), 38 deletions(-)

diff --git a/src/vs/workbench/contrib/search/browser/searchActionsFind.ts b/src/vs/workbench/contrib/search/browser/searchActionsFind.ts
index c2e3138..e866461 100644
--- a/src/vs/workbench/contrib/search/browser/searchActionsFind.ts
+++ b/src/vs/workbench/contrib/search/browser/searchActionsFind.ts
@@ -362,13 +362,13 @@ export async function findInFilesCommand(accessor: ServicesAccessor, _args: IFin
 
 	const mode = searchConfig.mode;
 	if (mode === 'view') {
-		openSearchView(viewsService, false).then(openedView => {
+		openSearchView(viewsService, false).then(async openedView => {
 			if (openedView) {
 				const searchAndReplaceWidget = openedView.searchAndReplaceWidget;
 				searchAndReplaceWidget.toggleReplace(typeof args.replace === 'string');
 				let updatedText = false;
 				if (typeof args.query !== 'string') {
-					updatedText = openedView.updateTextFromFindWidgetOrSelection({ allowUnselectedWord: typeof args.replace !== 'string' });
+					updatedText = await openedView.updateTextFromFindWidgetOrSelection({ allowUnselectedWord: typeof args.replace !== 'string' });
 				}
 				openedView.setSearchParameters(args);
 
diff --git a/src/vs/workbench/contrib/search/browser/searchActionsNav.ts b/src/vs/workbench/contrib/search/browser/searchActionsNav.ts
index 3ae42ec..893c5fb 100644
--- a/src/vs/workbench/contrib/search/browser/searchActionsNav.ts
+++ b/src/vs/workbench/contrib/search/browser/searchActionsNav.ts
@@ -472,12 +472,12 @@ async function focusPreviousSearchResult(accessor: ServicesAccessor): Promise<an
 }
 
 async function findOrReplaceInFiles(accessor: ServicesAccessor, expandSearchReplaceWidget: boolean): Promise<any> {
-	return openSearchView(accessor.get(IViewsService), false).then(openedView => {
+	return openSearchView(accessor.get(IViewsService), false).then(async openedView => {
 		if (openedView) {
 			const searchAndReplaceWidget = openedView.searchAndReplaceWidget;
 			searchAndReplaceWidget.toggleReplace(expandSearchReplaceWidget);
 
-			const updatedText = openedView.updateTextFromFindWidgetOrSelection({ allowUnselectedWord: !expandSearchReplaceWidget });
+			const updatedText = await openedView.updateTextFromFindWidgetOrSelection({ allowUnselectedWord: !expandSearchReplaceWidget });
 			openedView.searchAndReplaceWidget.focus(undefined, updatedText, updatedText);
 		}
 	});
diff --git a/src/vs/workbench/contrib/search/browser/searchView.ts b/src/vs/workbench/contrib/search/browser/searchView.ts
index 649a025..3fd8b0c 100644
--- a/src/vs/workbench/contrib/search/browser/searchView.ts
+++ b/src/vs/workbench/contrib/search/browser/searchView.ts
@@ -22,12 +22,9 @@ import { URI } from 'vs/base/common/uri';
 import * as network from 'vs/base/common/network';
 import 'vs/css!./media/searchview';
 import { getCodeEditor, isCodeEditor, isDiffEditor } from 'vs/editor/browser/editorBrowser';
-import { ICodeEditorService } from 'vs/editor/browser/services/codeEditorService';
-import { EmbeddedCodeEditorWidget } from 'vs/editor/browser/widget/embeddedCodeEditorWidget';
 import { IEditorOptions } from 'vs/editor/common/config/editorOptions';
 import { Selection } from 'vs/editor/common/core/selection';
 import { IEditor } from 'vs/editor/common/editorCommon';
-import { CommonFindController } from 'vs/editor/contrib/find/browser/findController';
 import { MultiCursorSelectionController } from 'vs/editor/contrib/multicursor/browser/multicursor';
 import * as nls from 'vs/nls';
 import { IAccessibilityService } from 'vs/platform/accessibility/common/accessibility';
@@ -81,6 +78,7 @@ import { ITextFileService } from 'vs/workbench/services/textfile/common/textfile
 import { INotebookService } from 'vs/workbench/contrib/notebook/common/notebookService';
 import { ILogService } from 'vs/platform/log/common/log';
 import { AccessibilitySignal, IAccessibilitySignalService } from 'vs/platform/accessibilitySignal/browser/accessibilitySignalService';
+import { IClipboardService } from 'vs/platform/clipboard/common/clipboardService';
 
 const $ = dom.$;
 
@@ -167,7 +165,6 @@ export class SearchView extends ViewPane {
 		options: IViewPaneOptions,
 		@IFileService private readonly fileService: IFileService,
 		@IEditorService private readonly editorService: IEditorService,
-		@ICodeEditorService private readonly codeEditorService: ICodeEditorService,
 		@IProgressService private readonly progressService: IProgressService,
 		@INotificationService private readonly notificationService: INotificationService,
 		@IDialogService private readonly dialogService: IDialogService,
@@ -192,7 +189,8 @@ export class SearchView extends ViewPane {
 		@ITelemetryService telemetryService: ITelemetryService,
 		@INotebookService private readonly notebookService: INotebookService,
 		@ILogService private readonly logService: ILogService,
-		@IAccessibilitySignalService private readonly accessibilitySignalService: IAccessibilitySignalService
+		@IAccessibilitySignalService private readonly accessibilitySignalService: IAccessibilitySignalService,
+		@IClipboardService private readonly clipboardService: IClipboardService
 	) {
 
 		super(options, keybindingService, contextMenuService, configurationService, contextKeyService, viewDescriptorService, instantiationService, openerService, themeService, telemetryService);
@@ -1090,40 +1088,17 @@ export class SearchView extends ViewPane {
 		}
 	}
 
-	updateTextFromFindWidgetOrSelection({ allowUnselectedWord = true, allowSearchOnType = true }): boolean {
-		let activeEditor = this.editorService.activeTextEditorControl;
-		if (isCodeEditor(activeEditor) && !activeEditor?.hasTextFocus()) {
-			const controller = CommonFindController.get(activeEditor);
-			if (controller && controller.isFindInputFocused()) {
-				return this.updateTextFromFindWidget(controller, { allowSearchOnType });
-			}
-
-			const editors = this.codeEditorService.listCodeEditors();
-			activeEditor = editors.find(editor => editor instanceof EmbeddedCodeEditorWidget && editor.getParentEditor() === activeEditor && editor.hasTextFocus())
-				?? activeEditor;
+	async updateTextFromFindWidgetOrSelection({ allowUnselectedWord = true, allowSearchOnType = true }): Promise<boolean> {
+		if (this.configurationService.getValue('search.globalFindClipboard')) {
+			let findText = await this.clipboardService.readFindText();
+			this.updateText(findText, allowSearchOnType);
+			return true;
 		}
 
+		let activeEditor = this.editorService.activeTextEditorControl;
 		return this.updateTextFromSelection({ allowUnselectedWord, allowSearchOnType }, activeEditor);
 	}
 
-	private updateTextFromFindWidget(controller: CommonFindController, { allowSearchOnType = true }): boolean {
-		if (!this.searchConfig.seedWithNearestWord && (dom.getActiveWindow().getSelection()?.toString() ?? '') === '') {
-			return false;
-		}
-
-		const searchString = controller.getState().searchString;
-		if (searchString === '') {
-			return false;
-		}
-
-		this.searchWidget.searchInput?.setCaseSensitive(controller.getState().matchCase);
-		this.searchWidget.searchInput?.setWholeWords(controller.getState().wholeWord);
-		this.searchWidget.searchInput?.setRegex(controller.getState().isRegex);
-		this.updateText(searchString, allowSearchOnType);
-
-		return true;
-	}
-
 	private updateTextFromSelection({ allowUnselectedWord = true, allowSearchOnType = true }, editor?: IEditor): boolean {
 		const seedSearchStringFromSelection = this.configurationService.getValue<IEditorOptions>('editor').find!.seedSearchStringFromSelection;
 		if (!seedSearchStringFromSelection || seedSearchStringFromSelection === 'never') {
@@ -1151,6 +1126,10 @@ export class SearchView extends ViewPane {
 			this.searchWidget.setValue(text);
 			this.pauseSearching = false;
 		}
+
+		if (this.configurationService.getValue('search.globalFindClipboard')) {
+			this.clipboardService.writeFindText(text);
+		}
 	}
 
 	focusNextInputBox(): void {
-- 
2.39.3 (Apple Git-146)
