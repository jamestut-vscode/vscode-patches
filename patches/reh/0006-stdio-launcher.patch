From 5e33a687fbdbc4add70bce750313db8bfc075ff1 Mon Sep 17 00:00:00 2001
From: James <aslan.jnn@gmail.com>
Date: Sun, 25 May 2025 21:28:19 +1000
Subject: Add proxy launcher for stdio transport method

---
 build/gulpfile.reh.js                        |   6 +-
 resources/server/bin/code-server-launcher.sh |   4 +
 src/server-launcher-main.ts                  | 271 +++++++++++++++++++
 3 files changed, 280 insertions(+), 1 deletion(-)
 create mode 100644 resources/server/bin/code-server-launcher.sh
 create mode 100644 src/server-launcher-main.ts

diff --git a/build/gulpfile.reh.js b/build/gulpfile.reh.js
index f9c269aa1ff..c5b85b64e3c 100644
--- a/build/gulpfile.reh.js
+++ b/build/gulpfile.reh.js
@@ -132,7 +132,8 @@ const serverWithWebEntryPoints = [
 const bootstrapEntryPoints = [
 	'out-build/server-main.js',
 	'out-build/server-cli.js',
-	'out-build/bootstrap-fork.js'
+	'out-build/bootstrap-fork.js',
+	'out-build/server-launcher-main.js'
 ];
 
 function getNodeVersion() {
@@ -400,6 +401,9 @@ function packageTask(type, platform, arch, sourceFolderName, destinationFolderNa
 					.pipe(util.setExecutableBit()),
 				gulp.src(`resources/server/bin/${platform === 'darwin' ? 'code-server-darwin.sh' : 'code-server-linux.sh'}`, { base: '.' })
 					.pipe(rename(`bin/${product.serverApplicationName}`))
+					.pipe(util.setExecutableBit()),
+				gulp.src(`resources/server/bin/code-server-launcher.sh`, { base: '.' })
+					.pipe(rename(`bin/launcher`))
 					.pipe(util.setExecutableBit())
 			);
 		}
diff --git a/resources/server/bin/code-server-launcher.sh b/resources/server/bin/code-server-launcher.sh
new file mode 100644
index 00000000000..3c29af44c39
--- /dev/null
+++ b/resources/server/bin/code-server-launcher.sh
@@ -0,0 +1,4 @@
+#!/usr/bin/env bash
+ROOT="$(dirname "$(realpath "$0")")"/..
+
+"$ROOT/node" ${INSPECT:-} "$ROOT/out/server-launcher-main.js" "$@"
diff --git a/src/server-launcher-main.ts b/src/server-launcher-main.ts
new file mode 100644
index 00000000000..cec0201afe5
--- /dev/null
+++ b/src/server-launcher-main.ts
@@ -0,0 +1,271 @@
+import * as fs from 'fs';
+import * as path from 'path';
+import * as os from 'os';
+import * as net from 'net';
+import { fileURLToPath } from 'url';
+import * as child_process from 'child_process';
+
+const __filename = fileURLToPath(import.meta.url);
+const __dirname = path.dirname(__filename);
+
+const programArgs = process.argv.slice(2);
+
+const DEFAULT_SHUTDOWN_TIMEOUT = 30;
+
+let serverDataFolderName: string;
+let remoteDataDir: string;
+let socketPath: string;
+
+class ArgumentParser {
+	private options: Map<string, { type: 'value' | 'store_true', value?: string }> = new Map();
+	private parsed: Map<string, string> = new Map();
+	public remainingArgs: string[] = [];
+
+	addArgument(name: string, options: { action: 'store_true' | 'value' }): void {
+		this.options.set(name, { type: options.action });
+	}
+
+	parseArgs(args: string[] = programArgs) {
+		this.parsed.clear();
+		this.remainingArgs.length = 0;
+
+		for (let i = 0; i < args.length; i++) {
+			const arg = args[i];
+
+			const option = this.options.get(arg);
+			if (option !== undefined) {
+				if (option.type === 'store_true') {
+					this.parsed.set(arg, '');
+				} else if (option.type === 'value') {
+					if (i + 1 < args.length) {
+						this.parsed.set(arg, args[i + 1]);
+						i++;
+					} else {
+						throw new Error(`Option ${arg} requires a value`);
+					}
+				}
+			} else {
+				this.remainingArgs.push(arg);
+			}
+		}
+	}
+
+	get(name: string): string | undefined {
+		return this.parsed.get(name);
+	}
+
+	has(name: string): boolean {
+		return this.parsed.has(name);
+	}
+}
+
+const ap = new ArgumentParser();
+ap.addArgument('--daemon', { action: 'store_true' });
+ap.addArgument('--help', { action: 'store_true' });
+ap.addArgument('--remote-data-dir', { action: 'value' });
+ap.addArgument('--socket-path', { action: 'value' });
+ap.addArgument('--remote-auto-shutdown-timeout', { action: 'value' });
+// block user from passing these arguments
+ap.addArgument('--user-data-dir', { action: 'value' });
+ap.addArgument('--extensions-dir', { action: 'value' });
+ap.addArgument('--daemonize', { action: 'store_true' });
+ap.parseArgs();
+
+function ensureDirectoryExists(dirPath: string): void {
+	try {
+		fs.mkdirSync(dirPath, { recursive: true });
+	} catch (error: any) {
+		if (error.code !== 'EEXIST') {
+			throw error;
+		}
+	}
+}
+
+function isSocketInUse(socketPath: string): Promise<boolean> {
+	return new Promise<boolean>((resolve) => {
+		const client = net.createConnection(socketPath);
+
+		client.on('connect', () => {
+			client.destroy();
+			resolve(true);
+		});
+
+		client.on('error', () => {
+			resolve(false);
+		});
+	});
+}
+
+async function connectToExistingInstance(childToWait?: child_process.ChildProcess): Promise<void> {
+	const tryConnect = (): Promise<void> => {
+		return new Promise<void>((resolve, reject) => {
+			const client = net.createConnection(socketPath);
+
+			client.on('connect', () => {
+				process.stdin.pipe(client);
+				client.pipe(process.stdout);
+
+				process.stdin.on('end', () => {
+					client.end();
+				});
+
+				client.on('end', () => {
+					resolve();
+				});
+			});
+
+			client.on('error', (error) => {
+				reject(error);
+			});
+		});
+	};
+
+	if (childToWait === undefined) {
+		return tryConnect();
+	}
+
+	// Wait mode: retry every 100ms until successful or the specified child process dies
+	while (true) {
+		try {
+			return await tryConnect();
+		} catch (error) {
+			// Check again if daemon process has died before waiting
+			if (childToWait.exitCode !== null || childToWait.killed) {
+				throw new Error('Child process has stopped, stopping connection attempts');
+			}
+			await new Promise(resolve => setTimeout(resolve, 100));
+		}
+	}
+}
+
+function createDaemonProcess() {
+	const child = child_process.fork(__filename, ['--daemon', ...programArgs], {
+		detached: true,
+		stdio: 'ignore',
+	});
+	return child;
+}
+
+function showHelp(): void {
+	console.log('Usage: server-launcher [options] [server-args...]');
+	console.log('');
+	console.log('Options:');
+	console.log('  --daemon');
+	console.log('    Run in daemon mode');
+	console.log('  --help');
+	console.log('    Show this help message');
+	console.log('  --remote-data-dir DIR');
+	console.log(`    Set remote data directory (default: ~/${serverDataFolderName})`);
+	console.log('  --socket-path PATH');
+	console.log('    Set socket path (default: <remote-data-dir>/vscode-server.sock)');
+	console.log('  --remote-auto-shutdown-timeout SEC');
+	console.log(`    Set server auto shutdown timeout (default: ${DEFAULT_SHUTDOWN_TIMEOUT} seconds)`);
+	console.log('');
+	console.log('All other arguments will be passed to the VS Code server, except for --user-data-dir, --extensions-dir, and --daemonize.');
+}
+
+function cleanupSocketFile() {
+	try {
+		fs.unlinkSync(socketPath);
+	} catch (error) { /* Ignore cleanup errors */ }
+}
+
+function runDaemon(): void {
+	let daemonChild: child_process.ChildProcess | null = null;
+
+	function cleanup() {
+		if (daemonChild) {
+			daemonChild.kill('SIGTERM');
+			daemonChild = null;
+		}
+		cleanupSocketFile();
+		process.exit(0);
+	}
+
+	process.on('SIGINT', cleanup);
+	process.on('SIGQUIT', cleanup);
+	process.on('SIGTERM', cleanup);
+
+	// Ignore SIGHUP to make daemon immune to terminal hangup
+	process.on('SIGHUP', () => { });
+
+	const autoShutdownTimeout = ap.get('--remote-auto-shutdown-timeout') ?? DEFAULT_SHUTDOWN_TIMEOUT.toString();
+	const serverArgs: string[] = [
+		'--user-data-dir', `${remoteDataDir}/data`,
+		'--extensions-dir', `${remoteDataDir}/extensions`,
+		'--socket-path', socketPath,
+		'--remote-auto-shutdown-timeout', autoShutdownTimeout
+	];
+	serverArgs.concat(ap.remainingArgs);
+
+	// Start the actual server process
+	daemonChild = child_process.fork(`${__dirname}/server-main.js`, serverArgs, {
+		stdio: 'ignore',
+		detached: false
+	});
+}
+
+async function main(): Promise<void> {
+	// read default serverDataFolderName (for help)
+	const productJsonPath = path.join(__dirname, '..', 'product.json');
+	const productJsonContent = JSON.parse(fs.readFileSync(productJsonPath, 'utf8'));
+	serverDataFolderName = productJsonContent.serverDataFolderName;
+
+	if (ap.has('--help')) {
+		showHelp();
+		process.exit(0);
+	}
+
+	// populate remote data dir
+	const userRemoteDataDir = ap.get('--remote-data-dir');
+	if (userRemoteDataDir !== undefined) {
+		remoteDataDir = path.resolve(userRemoteDataDir);
+	} else {
+		remoteDataDir = path.resolve(os.homedir(), serverDataFolderName);
+	}
+
+	// also socket directory
+	const userSocketPath = ap.get('--socket-path');
+	if (userSocketPath !== undefined) {
+		socketPath = path.resolve(userSocketPath);
+	} else {
+		socketPath = path.resolve(remoteDataDir, 'vscode-server.sock');
+	}
+
+	// run in daemon mode if needed
+	if (ap.has('--daemon')) {
+		runDaemon();
+		return;
+	}
+
+	ensureDirectoryExists(remoteDataDir);
+
+	if (await isSocketInUse(socketPath)) {
+		// Connect to existing instance
+		try {
+			await connectToExistingInstance();
+			return;
+		} catch (error) {
+			console.error('Failed to connect to existing instance:', error);
+			process.exit(1);
+		}
+	} else {
+		// if we're here, we know that the socket doesn't have an "owner"
+		// try remove the old socket so that the child VSCode server doesn't end up
+		// with EADDRINUSE
+		cleanupSocketFile();
+
+		// Continue with daemon creation
+		const serverProcess = createDaemonProcess();
+		// then attempt to connect to the newly created instance
+		await connectToExistingInstance(serverProcess);
+		// current session finished: detach from child and keep it running
+		serverProcess.channel?.unref();
+		serverProcess.unref();
+	}
+}
+
+main().catch((error) => {
+	console.error('Error:', error);
+	process.exit(1);
+});
-- 
2.39.5 (Apple Git-154)
