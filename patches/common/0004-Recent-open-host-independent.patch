From d5aa3edcac361fbd76dd78391c58910c207990c7 Mon Sep 17 00:00:00 2001
From: James <aslan.jnn@gmail.com>
Date: Sun, 19 Jan 2025 15:12:47 +1100
Subject: Host independent recent files

---
 .../electron-main/windowsMainService.ts       | 34 +++++++++++++++++--
 .../workspacesHistoryMainService.ts           | 19 ++++++++++-
 2 files changed, 49 insertions(+), 4 deletions(-)

diff --git a/src/vs/platform/windows/electron-main/windowsMainService.ts b/src/vs/platform/windows/electron-main/windowsMainService.ts
index f441f7d5fb7..6cc1c99ac07 100644
--- a/src/vs/platform/windows/electron-main/windowsMainService.ts
+++ b/src/vs/platform/windows/electron-main/windowsMainService.ts
@@ -301,6 +301,37 @@ export class WindowsMainService extends Disposable implements IWindowsMainServic
 		let filesToOpen: IFilesToOpen | undefined;
 		let openOneEmptyWindow = false;
 
+		// assign remoteAuthority to URIs if needed
+		const remoteAuthority = openConfig.remoteAuthority || this.getLastActiveWindow()?.remoteAuthority;
+		if (remoteAuthority && openConfig.urisToOpen && openConfig.urisToOpen.length > 0) {
+			const newUrisToOpen = openConfig.urisToOpen.map((openable): IWindowOpenable => {
+				let uri: URI;
+				if (isWorkspaceToOpen(openable)) {
+					uri = openable.workspaceUri;
+				} else if (isFolderToOpen(openable)) {
+					uri = openable.folderUri;
+				} else {
+					uri = openable.fileUri;
+				}
+				const newUri = URI.from({
+					scheme: 'vscode-remote',
+					authority: remoteAuthority,
+					path: uri.path
+				});
+				if (isWorkspaceToOpen(openable)) {
+					return { workspaceUri: newUri };
+				} else if (isFolderToOpen(openable)) {
+					return { folderUri: newUri };
+				} else {
+					return { fileUri: newUri };
+				}
+			});
+			openConfig = {
+				...openConfig,
+				urisToOpen: newUrisToOpen
+			};
+		}
+
 		// Identify things to open from open config
 		const pathsToOpen = await this.getPathsToOpen(openConfig);
 		this.logService.trace('windowsManager#open pathsToOpen', pathsToOpen);
@@ -1114,9 +1145,6 @@ export class WindowsMainService extends Disposable implements IWindowsMainServic
 
 			const fileUri = URI.file(path);
 
-			// since file does not seem to exist anymore, remove from recent
-			this.workspacesHistoryMainService.removeRecentlyOpened([fileUri]);
-
 			// assume this is a file that does not yet exist
 			if (options.ignoreFileNotFound) {
 				return {
diff --git a/src/vs/platform/workspaces/electron-main/workspacesHistoryMainService.ts b/src/vs/platform/workspaces/electron-main/workspacesHistoryMainService.ts
index 0ee2bec4960..f398dd9bcd1 100644
--- a/src/vs/platform/workspaces/electron-main/workspacesHistoryMainService.ts
+++ b/src/vs/platform/workspaces/electron-main/workspacesHistoryMainService.ts
@@ -79,7 +79,24 @@ export class WorkspacesHistoryMainService extends Disposable implements IWorkspa
 		let workspaces: Array<IRecentFolder | IRecentWorkspace> = [];
 		let files: IRecentFile[] = [];
 
-		for (const recent of recentToAdd) {
+		function stripRemoteFromUri(uri: URI): URI {
+			return URI.from({ scheme: 'file', path: uri.path });
+		}
+
+		function stripRemoteFromRecent(recent: IRecent): IRecent {
+			if (isRecentWorkspace(recent)) {
+				const wsConfig = recent.workspace;
+				wsConfig.configPath = stripRemoteFromUri(wsConfig.configPath);
+				return { label: recent.label, workspace: wsConfig };
+			} else if (isRecentFolder(recent)) {
+				return { label: recent.label, folderUri: stripRemoteFromUri(recent.folderUri) };
+			} else {
+				return { label: recent.label, fileUri: stripRemoteFromUri(recent.fileUri) };
+			}
+		}
+
+		for (const recentUnstripped of recentToAdd) {
+			const recent = stripRemoteFromRecent(recentUnstripped);
 
 			// Workspace
 			if (isRecentWorkspace(recent)) {
-- 
2.39.5 (Apple Git-154)
